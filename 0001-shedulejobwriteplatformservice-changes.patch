From b4ff38d78d5eef3ecaeebeb0dde7ec12aba8d2b8 Mon Sep 17 00:00:00 2001
From: Rakesh
 <rakesh@rakesh-Invalid-entry-length-0-DMI-table-is-broken-Stop.(none)>
Date: Mon, 23 Dec 2013 12:31:18 +0530
Subject: [PATCH] shedulejobwriteplatformservice changes

---
 .../SheduleJobWritePlatformServiceImpl.java        |  594 ++++++++++----------
 .../TomcatJdbcDataSourcePerTenantService.java      |    7 -
 2 files changed, 297 insertions(+), 304 deletions(-)

diff --git a/mifosng-provider/src/main/java/org/mifosplatform/billing/scheduledjobs/service/SheduleJobWritePlatformServiceImpl.java b/mifosng-provider/src/main/java/org/mifosplatform/billing/scheduledjobs/service/SheduleJobWritePlatformServiceImpl.java
index f17734e..8cd04ec 100644
--- a/mifosng-provider/src/main/java/org/mifosplatform/billing/scheduledjobs/service/SheduleJobWritePlatformServiceImpl.java
+++ b/mifosng-provider/src/main/java/org/mifosplatform/billing/scheduledjobs/service/SheduleJobWritePlatformServiceImpl.java
@@ -1,17 +1,145 @@
+
+	/*// @Transactional
+	@SuppressWarnings("unused")
+	@Override
+	@CronTarget(jobName = JobName.INVOICE)
+	public void processInvoice() {
+		
+		try {
+			
+			JobParameterData data = this.sheduleJobReadPlatformService
+					.getJobParameters(JobName.INVOICE.toString());
+
+			if (data != null) {
+
+				List<ScheduleJobData> sheduleDatas = this.sheduleJobReadPlatformService
+						.retrieveSheduleJobParameterDetails(data.getBatchName());
+
+				for (ScheduleJobData scheduleJobData : sheduleDatas) {
+					
+				        file = new File(FileUtils.MIFOSX_BASE_DIR + File.separator + ThreadLocalContextUtil.getTenant().getName().replaceAll(" ", "").trim()
+				                + File.separator + "SheduleLogFile"+ File.separator +"ScheduleLog-"+new Date().toString().replace(" ", "-").trim()+".log");
+				        
+				        FileUtils.BILLING_JOB_INVOICE_PATH=file.getAbsolutePath();
+				        
+				        if(!file.exists()){
+				        	try {
+								file.createNewFile();
+							} catch (IOException e) {
+								try {
+									FileWriter fw = new FileWriter(file);
+									fw.append(e.toString());
+									fw.close();
+								} catch (IOException e1) {
+									// TODO Auto-generated catch block
+									e1.printStackTrace();
+								}
+								e.printStackTrace();
+							}
+				        }
+
+					List<Long> clientIds = this.sheduleJobReadPlatformService
+							.getClientIds(scheduleJobData.getQuery());
+
+					// Get the Client Idsid,job_id,version,start_time,end_time,status,error_message,trigger_type,error_log,file_pathid,job_id,version,start_time,end_time,status,error_message,trigger_type,error_log,file_pathid,job_id,version,start_time,end_time,status,error_message,trigger_type,error_log,file_pathid,job_id,version,start_time,end_time,status,error_message,trigger_type,error_log,file_path @Column(name = "error_log")
+				    
+					for (Long clientId : clientIds) {
+						try {
+
+						BigDecimal amount=	this.invoiceClient.invoicingSingleClient(clientId,
+									data.getProcessDate());
+							
+						
+						FileHandler fh = new FileHandler("/home/rakesh/workspace/Git/billing/obsplatform/build/tmp/tomcatRunWar/logs/MyLogFile.log");  
+			            //logger.addHandler(fh);  
+			            //logger.setLevel(Level.ALL);  
+			            SimpleFormatter formatter = new SimpleFormatter();  
+			            fh.setFormatter(formatter);  
+			              
+			            // the following statement is used to log any messages  
+			            logger.info("My first log");  
+						
+						
+						//logger.info(amount.toString());
+						
+							if(amount!=null){
+								
+								FileWriter fw = new FileWriter(file);
+								fw.append("ClientId:"+clientId+"\t"+"Amount:"+amount.toString()+" Success\n");
+								fw.close();
+								}
+							else{
+								FileWriter fw = new FileWriter(file);
+								fw.append("Amount null");
+								fw.close();
+							}
+							
+							
+		
+
+						} catch (Exception dve) {
+								
+							try {
+								FileWriter fw = new FileWriter(file);
+								fw.append(dve.toString());
+								fw.close();
+							} catch (IOException e1) {
+								// TODO Auto-generated catch block
+								e1.printStackTrace();
+							}
+							// TODO Auto-generated catch block
+							handleCodeDataIntegrityIssues(null, dve);
+						}
+					}
+					
+					 * ScheduleJobs scheduleJob = this.scheduledJobRepository
+					 * .findOne(scheduleJobData.getId());
+					 * scheduleJob.setStatus('Y');
+					 * this.scheduledJobRepository.save(scheduleJob);
+					 
+				
+				}
+
+				System.out.println("Invoices are Generated....."
+						+ ThreadLocalContextUtil.getTenant()
+								.getTenantIdentifier());
+
+			}
+
+		} catch (DataIntegrityViolationException exception) {
+				
+			try {
+				FileWriter fw = new FileWriter(file);
+				fw.append(exception.toString());
+				fw.close();
+			} catch (IOException e) {
+				// TODO Auto-generated catch block
+				e.printStackTrace();
+			}
+			// TODO Auto-generated catch block
+			exception.printStackTrace();
+		}
+
+	}
+
+	private void handleCodeDataIntegrityIssues(Object object, Exception dve) {
+		// TODO Auto-generated method stub
+		
+	}
+*/
+
 package org.mifosplatform.billing.scheduledjobs.service;
 
+
 import java.io.BufferedReader;
 import java.io.File;
 import java.io.FileWriter;
 import java.io.IOException;
 import java.io.InputStreamReader;
 import java.math.BigDecimal;
+import java.text.SimpleDateFormat;
 import java.util.Date;
 import java.util.List;
-import java.util.logging.FileHandler;
-import java.util.logging.SimpleFormatter;
-
-import javax.persistence.Column;
 
 import org.apache.commons.codec.binary.Base64;
 import org.apache.http.HttpResponse;
@@ -37,6 +165,7 @@ import org.mifosplatform.billing.message.service.MessagePlatformEmailService;
 import org.mifosplatform.billing.order.data.OrderData;
 import org.mifosplatform.billing.order.service.OrderReadPlatformService;
 import org.mifosplatform.billing.order.service.OrderWritePlatformService;
+import org.mifosplatform.billing.plan.domain.StatusTypeEnum;
 import org.mifosplatform.billing.preparerequest.data.PrepareRequestData;
 import org.mifosplatform.billing.preparerequest.service.PrepareRequestReadplatformService;
 import org.mifosplatform.billing.processrequest.data.ProcessingDetailsData;
@@ -49,7 +178,6 @@ import org.mifosplatform.billing.scheduledjobs.ProcessRequestWriteplatformServic
 import org.mifosplatform.billing.scheduledjobs.data.JobParameterData;
 import org.mifosplatform.billing.scheduledjobs.data.ScheduleJobData;
 import org.mifosplatform.billing.scheduledjobs.domain.ScheduledJobRepository;
-import org.mifosplatform.billing.servicemaster.service.ServiceMasterWritePlatformServiceImpl;
 import org.mifosplatform.infrastructure.core.api.JsonCommand;
 import org.mifosplatform.infrastructure.core.data.CommandProcessingResult;
 import org.mifosplatform.infrastructure.core.serialization.FromJsonHelper;
@@ -58,9 +186,6 @@ import org.mifosplatform.infrastructure.core.service.ThreadLocalContextUtil;
 import org.mifosplatform.infrastructure.jobs.annotation.CronTarget;
 import org.mifosplatform.infrastructure.jobs.domain.ScheduledJobDetailRepository;
 import org.mifosplatform.infrastructure.jobs.service.JobName;
-import org.mifosplatform.infrastructure.jobs.service.SchedulerJobListener;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.dao.DataIntegrityViolationException;
 import org.springframework.stereotype.Service;
@@ -72,8 +197,7 @@ import com.google.gson.JsonObject;
 @Service
 public class SheduleJobWritePlatformServiceImpl implements
 		SheduleJobWritePlatformService {
-	
-	//private final static Logger logger = LoggerFactory.getLogger(ServiceMasterWritePlatformServiceImpl.class);
+
 	private final SheduleJobReadPlatformService sheduleJobReadPlatformService;
 	private final InvoiceClient invoiceClient;
 	private final ScheduledJobRepository scheduledJobRepository;
@@ -93,8 +217,7 @@ public class SheduleJobWritePlatformServiceImpl implements
 
 	private final EntitlementWritePlatformService entitlementWritePlatformService;
 	private String ReceiveMessage;
-	public File file=null;
-	
+	private File file=null;
 	@Autowired
 	public SheduleJobWritePlatformServiceImpl(
 			final InvoiceClient invoiceClient,
@@ -134,131 +257,91 @@ public class SheduleJobWritePlatformServiceImpl implements
 	}
 
 	// @Transactional
-	@SuppressWarnings("unused")
 	@Override
 	@CronTarget(jobName = JobName.INVOICE)
 	public void processInvoice() {
-		
-		try {
-			
-			JobParameterData data = this.sheduleJobReadPlatformService
-					.getJobParameters(JobName.INVOICE.toString());
 
-			if (data != null) {
 
-				List<ScheduleJobData> sheduleDatas = this.sheduleJobReadPlatformService
-						.retrieveSheduleJobParameterDetails(data.getBatchName());
-
-				for (ScheduleJobData scheduleJobData : sheduleDatas) {
-					
-				        file = new File(FileUtils.MIFOSX_BASE_DIR + File.separator + ThreadLocalContextUtil.getTenant().getName().replaceAll(" ", "").trim()
-				                + File.separator + "SheduleLogFile"+ File.separator +"ScheduleLog-"+new Date().toString().replace(" ", "-").trim()+".log");
-				        
-				        FileUtils.BILLING_JOB_INVOICE_PATH=file.getAbsolutePath();
-				        
-				        if(!file.exists()){
-				        	try {
-								file.createNewFile();
-							} catch (IOException e) {
-								try {
-									FileWriter fw = new FileWriter(file);
-									fw.append(e.toString());
-									fw.close();
-								} catch (IOException e1) {
-									// TODO Auto-generated catch block
-									e1.printStackTrace();
-								}
-								e.printStackTrace();
-							}
-				        }
-
-					List<Long> clientIds = this.sheduleJobReadPlatformService
-							.getClientIds(scheduleJobData.getQuery());
-
-					// Get the Client Idsid,job_id,version,start_time,end_time,status,error_message,trigger_type,error_log,file_pathid,job_id,version,start_time,end_time,status,error_message,trigger_type,error_log,file_pathid,job_id,version,start_time,end_time,status,error_message,trigger_type,error_log,file_pathid,job_id,version,start_time,end_time,status,error_message,trigger_type,error_log,file_path @Column(name = "error_log")
-				    
-					for (Long clientId : clientIds) {
-						try {
-
-						BigDecimal amount=	this.invoiceClient.invoicingSingleClient(clientId,
-									data.getProcessDate());
-							
-						/*
-						FileHandler fh = new FileHandler("/home/rakesh/workspace/Git/billing/obsplatform/build/tmp/tomcatRunWar/logs/MyLogFile.log");  
-			            //logger.addHandler(fh);  
-			            //logger.setLevel(Level.ALL);  
-			            SimpleFormatter formatter = new SimpleFormatter();  
-			            fh.setFormatter(formatter);  
-			              
-			            // the following statement is used to log any messages  
-			            logger.info("My first log");  */
-						
-						
-						//logger.info(amount.toString());
-						
-							if(amount!=null){
-								
-								FileWriter fw = new FileWriter(file);
-								fw.append("ClientId:"+clientId+"\t"+"Amount:"+amount.toString()+" Success\n");
-								fw.close();
-								}
-							else{
-								FileWriter fw = new FileWriter(file);
-								fw.append("Amount null");
-								fw.close();
-							}
-							
-							
+	try
+	{
 		
-
-						} catch (Exception dve) {
-								
-							try {
-								FileWriter fw = new FileWriter(file);
-								fw.append(dve.toString());
-								fw.close();
-							} catch (IOException e1) {
-								// TODO Auto-generated catch block
-								e1.printStackTrace();
-							}
-							// TODO Auto-generated catch block
-							handleCodeDataIntegrityIssues(null, dve);
-						}
-					}
-					/*
-					 * ScheduleJobs scheduleJob = this.scheduledJobRepository
-					 * .findOne(scheduleJobData.getId());
-					 * scheduleJob.setStatus('Y');
-					 * this.scheduledJobRepository.save(scheduleJob);
-					 */
-				
-				}
-
-				System.out.println("Invoices are Generated....."
-						+ ThreadLocalContextUtil.getTenant()
-								.getTenantIdentifier());
-
-			}
-
-		} catch (DataIntegrityViolationException exception) {
-				
-			try {
-				FileWriter fw = new FileWriter(file);
-				fw.append(exception.toString());
-				fw.close();
-			} catch (IOException e) {
-				// TODO Auto-generated catch block
-				e.printStackTrace();
-			}
-			// TODO Auto-generated catch block
-			exception.printStackTrace();
-		}
+		JobParameterData data=this.sheduleJobReadPlatformService.getJobParameters(JobName.INVOICE.toString());
+		
+		if(data!=null){
+			
+		    	List<ScheduleJobData> sheduleDatas = this.sheduleJobReadPlatformService.retrieveSheduleJobParameterDetails(data.getBatchName());
+		    	    	 
+		    	    	 for (ScheduleJobData scheduleJobData : sheduleDatas) {
+		    	    		 
+		    	    		 file = new File(FileUtils.MIFOSX_BASE_DIR + File.separator + ThreadLocalContextUtil.getTenant().getName().replaceAll(" ", "").trim()
+						                + File.separator + "SheduleLogFile"+ File.separator +"ScheduleLog-"+new Date().toString().replace(" ", "-").trim()+".log");
+						        
+						        FileUtils.BILLING_JOB_INVOICE_PATH=file.getAbsolutePath();
+						        
+						        if(!file.exists()){
+						        	try {
+										file.createNewFile();
+									} catch (IOException e) {
+										try {
+											FileWriter fw = new FileWriter(file);
+											fw.append(e.toString());
+											fw.close();
+										} catch (IOException e1) {
+											// TODO Auto-generated catch block
+											e1.printStackTrace();
+										}
+										e.printStackTrace();
+									}
+						        }
+
+
+		    	 			List<Long> clientIds = this.sheduleJobReadPlatformService.getClientIds(scheduleJobData.getQuery());
+		    	 			
+		    	 			// Get the Client Ids
+		    	 			for (Long clientId : clientIds) {
+		    	 				try {
+		    	 					
+		    	 					if(data.isDynamic().equalsIgnoreCase("Y")){
+		    	 						
+		    	 						BigDecimal amount=this.invoiceClient.invoicingSingleClient(clientId,new LocalDate());
+		    	 						FileWriter fw = new FileWriter(file);
+										fw.append("ClientId: "+clientId+"\tAmount: "+amount.toString());
+										fw.close();
+		    	 					}else{
+		    	 						BigDecimal amount=this.invoiceClient.invoicingSingleClient(clientId,data.getProcessDate());
+		    	 						FileWriter fw = new FileWriter(file);
+										fw.append("ClientId: "+clientId+"\tAmount: "+amount.toString());
+										fw.close();
+		    	 					}
+
+		    	 					
+
+		    	 				} catch (Exception dve) {
+		    	 					
+		    	 					handleCodeDataIntegrityIssues(null, dve);
+		    	 				}
+		    	 			}
+		    	 			/*ScheduleJobs scheduleJob = this.scheduledJobRepository
+		    	 					.findOne(scheduleJobData.getId());
+		    	 			scheduleJob.setStatus('Y');
+		    	 			this.scheduledJobRepository.save(scheduleJob);*/
+		    	 		}
+
+		    	 		System.out.println("Invoices are Generated....."+ThreadLocalContextUtil.getTenant().getTenantIdentifier());
+		    	
+		    }
+	
+	}catch(DataIntegrityViolationException exception)
+	{
+		exception.printStackTrace();
+	}
+	
 
 	}
 
 	private void handleCodeDataIntegrityIssues(Object object, Exception dve) {
 		// TODO Auto-generated method stub
-		
+
 	}
 
 	@Transactional
@@ -269,19 +352,12 @@ public class SheduleJobWritePlatformServiceImpl implements
 		try {
 
 			System.out.println("Processing Request Details.......");
-
-			List<PrepareRequestData> data = this.prepareRequestReadplatformService
-					.retrieveDataForProcessing();
-
+			List<PrepareRequestData> data = this.prepareRequestReadplatformService.retrieveDataForProcessing();
 			for (PrepareRequestData requestData : data) {
 
-				this.prepareRequestReadplatformService
-						.processingClientDetails(requestData);
+				this.prepareRequestReadplatformService.processingClientDetails(requestData);
 			}
-
-			System.out.println(" Requestor Job is Completed...."
-					+ ThreadLocalContextUtil.getTenant().getTenantIdentifier());
-
+			System.out.println(" Requestor Job is Completed...."+ ThreadLocalContextUtil.getTenant().getTenantIdentifier());
 		} catch (DataIntegrityViolationException exception) {
 
 		}
@@ -295,16 +371,13 @@ public class SheduleJobWritePlatformServiceImpl implements
 		try {
 			System.out.println("Processing Response Details.......");
 
-			List<ProcessingDetailsData> processingDetails = this.processRequestReadplatformService
-					.retrieveProcessingDetails();
+			List<ProcessingDetailsData> processingDetails = this.processRequestReadplatformService.retrieveProcessingDetails();
 
 			for (ProcessingDetailsData detailsData : processingDetails) {
 
-				this.processRequestWriteplatformService
-						.notifyProcessingDetails(detailsData);
+				this.processRequestWriteplatformService.notifyProcessingDetails(detailsData);
 			}
-			System.out.println("Responsor Job is Completed..."
-					+ ThreadLocalContextUtil.getTenant().getTenantIdentifier());
+			System.out.println("Responsor Job is Completed..."+ ThreadLocalContextUtil.getTenant().getTenantIdentifier());
 
 		} catch (DataIntegrityViolationException exception) {
 
@@ -344,34 +417,38 @@ public class SheduleJobWritePlatformServiceImpl implements
 
 		try {
 			System.out.println("Processing statement Details.......");
-			JobParameterData data = this.sheduleJobReadPlatformService
-					.getJobParameters(JobName.GENERATE_STATMENT.toString());
-			if (data != null) {
-
-				List<ScheduleJobData> sheduleDatas = this.sheduleJobReadPlatformService
-						.retrieveSheduleJobParameterDetails(data.getBatchName());
-
-				for (ScheduleJobData scheduleJobData : sheduleDatas) {
-					List<Long> clientIds = this.sheduleJobReadPlatformService
-							.getClientIds(scheduleJobData.getQuery());
-
-					for (Long clientId : clientIds) {
 
-						JSONObject jsonobject = new JSONObject();
+			JobParameterData data=this.sheduleJobReadPlatformService.getJobParameters(JobName.GENERATE_STATMENT.toString());
+		    if(data!=null){
+		    	 
+		    	 List<ScheduleJobData> sheduleDatas = this.sheduleJobReadPlatformService.retrieveSheduleJobParameterDetails(data.getBatchName());
+		    	 
+		    	for(ScheduleJobData scheduleJobData:sheduleDatas)
+				{
+					List<Long> clientIds = this.sheduleJobReadPlatformService.getClientIds(scheduleJobData.getQuery());
+					  
+					 for(Long clientId:clientIds)
+					 {
+						
+						 JSONObject jsonobject = new JSONObject();
+						
+							DateTimeFormatter formatter = DateTimeFormat.forPattern("dd MMMM yyyy");
+							String formattedDate ;
+							if(data.isDynamic().equalsIgnoreCase("Y")){
+								formattedDate = formatter.print(new LocalDate());	
+							}else{
+								formattedDate = formatter.print(data.getDueDate());
+							}
+							
 
-						DateTimeFormatter formatter = DateTimeFormat
-								.forPattern("dd MMMM yyyy");
-						String formattedDate = formatter.print(data
-								.getDueDate());
+							// System.out.println(formattedDate);
+							jsonobject.put("dueDate",formattedDate);
+							jsonobject.put("locale", "en");
+							jsonobject.put("dateFormat", "dd MMMM YYYY");
+							jsonobject.put("message", data.getPromotionalMessage());
+							this.billingMasterApiResourse.retrieveBillingProducts(clientId,	jsonobject.toString());
+					 }
 
-						// System.out.println(formattedDate);
-						jsonobject.put("dueDate", formattedDate);
-						jsonobject.put("locale", "en");
-						jsonobject.put("dateFormat", "dd MMMM YYYY");
-						jsonobject.put("message", data.getPromotionalMessage());
-						this.billingMasterApiResourse.retrieveBillingProducts(
-								clientId, jsonobject.toString());
-					}
 				}
 
 			}
@@ -424,48 +501,63 @@ public class SheduleJobWritePlatformServiceImpl implements
 		try {
 			System.out.println("Processing Auto Exipiry Details.......");
 
-			JobParameterData data = this.sheduleJobReadPlatformService
-					.getJobParameters(JobName.AUTO_EXIPIRY.toString());
-
-			if (data != null) {
-
-				List<ScheduleJobData> sheduleDatas = this.sheduleJobReadPlatformService
-						.retrieveSheduleJobParameterDetails(data.getBatchName());
-
-				for (ScheduleJobData scheduleJobData : sheduleDatas) {
-					List<Long> clientIds = this.sheduleJobReadPlatformService
-							.getClientIds(scheduleJobData.getQuery());
-					for (Long clientId : clientIds) {
-
-						List<OrderData> orderDatas = this.orderReadPlatformService
-								.retrieveClientOrderDetails(clientId);
-
-						for (OrderData orderData : orderDatas) {
-
-							if (orderData.getEndDate().equals(new LocalDate())) {
-
-								JSONObject jsonobject = new JSONObject();
-								jsonobject.put("disconnectReason",
-										"Date Expired");
-								final JsonElement parsedCommand = this.fromApiJsonHelper
-										.parse(jsonobject.toString());
-
-								final JsonCommand command = JsonCommand.from(
-										jsonobject.toString(), parsedCommand,
-										this.fromApiJsonHelper,
-										"DissconnectOrder", clientId, null,
-										null, clientId, null, null, null, null,
-										null, null);
-								this.orderWritePlatformService.disconnectOrder(
-										command, orderData.getId());
-							}
-						}
-					}
+			
+			JobParameterData data=this.sheduleJobReadPlatformService.getJobParameters(JobName.AUTO_EXIPIRY.toString());
+         
+                 if(data!=null){
+                	 
+			List<ScheduleJobData> sheduleDatas = this.sheduleJobReadPlatformService.retrieveSheduleJobParameterDetails(data.getBatchName());
+			LocalDate exipirydate=null;
+			if(data.isDynamic().equalsIgnoreCase("Y")){
+				exipirydate=new LocalDate();
+			}else{
+				exipirydate=data.getExipiryDate();
+			}
+			for (ScheduleJobData scheduleJobData : sheduleDatas) 
+			{
+				List<Long> clientIds = this.sheduleJobReadPlatformService.getClientIds(scheduleJobData.getQuery());
+				
+				for(Long clientId:clientIds)
+				{
+					
+				List<OrderData> orderDatas = this.orderReadPlatformService.retrieveClientOrderDetails(clientId);
+				
+      			for (OrderData orderData : orderDatas) 
+      			  {
+      				
+      				if(!(orderData.getStatus().equalsIgnoreCase(StatusTypeEnum.DISCONNECTED.toString()) || orderData.getStatus().equalsIgnoreCase(StatusTypeEnum.PENDING.toString())))
+      				 {
+      					
+				    if (orderData.getEndDate().equals(exipirydate) || exipirydate.isAfter(orderData.getEndDate()))
+				     {
+
+				    	  SimpleDateFormat dateFormat = new SimpleDateFormat("dd MMMM yyyy");
+				  		//System.out.println(dateFormat.format(localDate.toDate()));
+					JSONObject jsonobject = new JSONObject();
+					jsonobject.put("disconnectReason","Date Expired");
+					jsonobject.put("disconnectionDate",dateFormat.format(orderData.getEndDate().toDate()));
+					jsonobject.put("dateFormat","dd MMMM yyyy");
+					jsonobject.put("locale","en");
+					final JsonElement parsedCommand = this.fromApiJsonHelper.parse(jsonobject.toString());
+
+					final JsonCommand command = JsonCommand.from(jsonobject.toString(),parsedCommand,this.fromApiJsonHelper,"DissconnectOrder",clientId, null,
+							null,clientId, null, null, null,null, null, null);
+					this.orderWritePlatformService.disconnectOrder(command,	orderData.getId());
+				     }
 				}
 			}
+				}
+				}
+		}
+		
+		   
+
+
+		
 
 		} catch (Exception dve) {
 			handleCodeDataIntegrityIssues(null, dve);
+
 		}
 	}
 
@@ -502,96 +594,6 @@ public class SheduleJobWritePlatformServiceImpl implements
 	@CronTarget(jobName = JobName.Middleware)
 	public void processMiddleware() {
 		// TODO Auto-generated method stub
-
-			try {
-				
-				System.out.println("Processing Middleware Details.......");
-				
-				JobParameterData data=this.sheduleJobReadPlatformService.getJobParameters(JobName.Middleware.toString());
-				String credentials=data.getUsername().trim() + ":" + data.getPassword().trim();
-	    		byte[] encoded = Base64.encodeBase64(credentials.getBytes());
-	    		HttpClient httpClient = new DefaultHttpClient(); 
-			
-				List<EntitlementsData> entitlementDataForProcessings=this.entitlementReadPlatformService.getProcessingData(new Long(100));
-				
-	    	    for(EntitlementsData entitlementsData : entitlementDataForProcessings){
-	    	    	  	
-	    	    	JsonObject object=new JsonObject();
-				    object.addProperty("serviceId", entitlementsData.getServiceId() );
-				    object.addProperty("receivedStatus",new Long(1));
-				    ReceiveMessage="Success";
-    	    		Long clientId=entitlementsData.getClientId();
-	    	    	ClientEntitlementData clientdata= this.entitlementReadPlatformService.getClientData(clientId);    	    
-    	    		String query="login= "+clientdata.getEmailId()+"&password=0000&full_name="+clientdata.getFullName()+"&account_number="+clientId+"&tariff_plan=1&status=1&&stb_mac="+entitlementsData.getHardwareId();
-    	    		StringEntity se = new StringEntity(query.trim());
-    	    		HttpPost postRequest = new HttpPost(data.getUrl()+"/accounts/");
-    	    		postRequest.setHeader("Authorization", "Basic " + new String(encoded));
-    	    		postRequest.setEntity(se);
-    	    		HttpResponse response = httpClient.execute(postRequest);
-    	    		if (response.getStatusLine().getStatusCode() != 200) {
-    	    			System.out.println("Failed : HTTP error code : 444" +
-    	    					 response.getStatusLine().getStatusCode());
-    	    			return;
-    	    		}
-    	    		BufferedReader br1 = new BufferedReader(new InputStreamReader((response.getEntity().getContent())));
-    	    		String output;
-    	    		while ((output = br1.readLine()) != null) {    			
-                        System.out.println(output);
-                        final JsonElement ele = fromApiJsonHelper.parse(output);
-                        final String status = fromApiJsonHelper.extractStringNamed("status", ele);
-                        if(status.equalsIgnoreCase("ERROR")){
-                         final String error = fromApiJsonHelper.extractStringNamed("error", ele);
-                         ReceiveMessage="failure :"+error;
-                        }
-    	    		}
-				 
-    	    		
-    	    		String query1=data.getUrl()+"account_subscription/"+clientId;
-    	    		String queryData="subscribed[]="+entitlementsData.getProduct();
-    	    		StringEntity se1 = new StringEntity(queryData.trim());
-    	    		
-    	    		HttpPut putRequest= new HttpPut(query1.trim());
-    	    		putRequest.setHeader("Authorization", "Basic " + new String(encoded));
-    	    		putRequest.setEntity(se1);
-    	    		HttpResponse response1 = httpClient.execute(putRequest);
-    	    		if (response1.getStatusLine().getStatusCode() != 200) {
-    	    			System.out.println("Failed : HTTP error code : "
-    	    					+ response1.getStatusLine().getStatusCode());
-    	    			return;
-    	    		}
-    	    		BufferedReader br2 = new BufferedReader(new InputStreamReader((response1.getEntity().getContent())));
-
-    	    		String output2;
-    	    		while ((output2 = br2.readLine()) != null) {
-                        System.out.println(output2);
-                        final JsonElement ele = fromApiJsonHelper.parse(output2);
-                        final String status = fromApiJsonHelper.extractStringNamed("status", ele);
-                        final String results = fromApiJsonHelper.extractStringNamed("results", ele);
-                        if(status.equalsIgnoreCase("ERROR")){
-                              final String error = fromApiJsonHelper.extractStringNamed("error", ele);
-                              ReceiveMessage="failure :"+error;
-                        }   
-                        if(results.equalsIgnoreCase("false")){
-                        	if(ReceiveMessage.equalsIgnoreCase("Success")){
-                        		 ReceiveMessage="failure :";
-                        	}                    	 
-                        }
-                       
-    	    		}
-                    
-    	    		object.addProperty("receiveMessage", ReceiveMessage);
-				    String entityName="ENTITLEMENT";
-				    final JsonElement element1 = fromApiJsonHelper.parse(object.toString());
-				    JsonCommand comm=new JsonCommand(null, object.toString(), element1, fromApiJsonHelper, entityName, entitlementsData.getId(), null, null, null,
-			                null, null, null, null, null, null);
-				    CommandProcessingResult result=this.entitlementWritePlatformService.create(comm);
-				    System.out.println(result);
-				     	    		
-	    	    }    
-	    	    httpClient.getConnectionManager().shutdown();
-				System.out.println("Middleware Job is Completed...");
-			} catch (DataIntegrityViolationException exception) {
-
 		try {
 
 			System.out.println("Processing Middleware Details.......");
@@ -705,9 +707,6 @@ public class SheduleJobWritePlatformServiceImpl implements
 			
 		} catch (DataIntegrityViolationException exception) {
 
-
-}
-
 		} catch (IOException e) {
 			// TODO Auto-generated catch block
 			e.printStackTrace();
@@ -715,3 +714,4 @@ public class SheduleJobWritePlatformServiceImpl implements
 	}
 }
 
+	
\ No newline at end of file
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/infrastructure/core/service/TomcatJdbcDataSourcePerTenantService.java b/mifosng-provider/src/main/java/org/mifosplatform/infrastructure/core/service/TomcatJdbcDataSourcePerTenantService.java
index 3690a45..16634ca 100644
--- a/mifosng-provider/src/main/java/org/mifosplatform/infrastructure/core/service/TomcatJdbcDataSourcePerTenantService.java
+++ b/mifosng-provider/src/main/java/org/mifosplatform/infrastructure/core/service/TomcatJdbcDataSourcePerTenantService.java
@@ -151,12 +151,5 @@ public class TomcatJdbcDataSourcePerTenantService implements DataSourcePerTenant
 		return null;
 	}
 
-        @Override
-	public Logger getParentLogger() throws SQLFeatureNotSupportedException {
-		// TODO Auto-generated method stub
-		return null;
-	}
-
-
 	
 }
-- 
1.7.9.5

