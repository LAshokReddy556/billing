From 0f3b82b44702e586fde6859ac7b8fca84c1a5119 Mon Sep 17 00:00:00 2001
From: ashokreddylingala <lingala.ashokreddy@gmail.com>
Date: Wed, 4 Dec 2013 19:09:28 +0530
Subject: [PATCH] paymentGateway

---
 0001-java.lang.patch                               |  31 ++++
 .../PaymentCommandFromApiJsonDeserializer.java     |   2 +-
 .../service/PaymentWritePlatformServiceImpl.java   |   3 +
 .../api/PaymentGatewayApiResource.java             |  49 +++++++
 .../paymentsgateway/domain/PaymentGateway.java     | 148 +++++++++++++++++++
 .../domain/PaymentGatewayRepository.java           |   9 ++
 .../CreatePaymentGatewayCommandHandler.java        |  27 ++++
 ...ymentGatewayCommandFromApiJsonDeserializer.java |  78 ++++++++++
 .../PaymentGatewayWritePlatformService.java        |  11 ++
 .../PaymentGatewayWritePlatformServiceImpl.java    | 157 +++++++++++++++++++++
 .../service/PaymodeReadPlatformService.java        |   2 +
 .../service/PaymodeReadPlatformServiceImpl.java    |  28 ++++
 .../commands/domain/CommandWrapper.java            |   9 ++
 .../commands/service/CommandWrapperBuilder.java    |  10 ++
 .../SynchronousCommandProcessingService.java       |   8 +-
 .../TomcatJdbcDataSourcePerTenantService.java      |   8 ++
 16 files changed, 576 insertions(+), 4 deletions(-)
 create mode 100644 0001-java.lang.patch
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/billing/paymentsgateway/api/PaymentGatewayApiResource.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/billing/paymentsgateway/domain/PaymentGateway.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/billing/paymentsgateway/domain/PaymentGatewayRepository.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/billing/paymentsgateway/handler/CreatePaymentGatewayCommandHandler.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/billing/paymentsgateway/serialization/PaymentGatewayCommandFromApiJsonDeserializer.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/billing/paymentsgateway/service/PaymentGatewayWritePlatformService.java
 create mode 100644 mifosng-provider/src/main/java/org/mifosplatform/billing/paymentsgateway/service/PaymentGatewayWritePlatformServiceImpl.java

diff --git a/0001-java.lang.patch b/0001-java.lang.patch
new file mode 100644
index 0000000..16f13ea
--- /dev/null
+++ b/0001-java.lang.patch
@@ -0,0 +1,31 @@
+From 56ff1baa1934b50ca54812427179df901b404d9c Mon Sep 17 00:00:00 2001
+From: ashokreddylingala <lingala.ashokreddy@gmail.com>
+Date: Wed, 4 Dec 2013 16:46:07 +0530
+Subject: [PATCH] java.lang.*
+
+---
+ .../src/main/java/com/journaldev/exceptions/ExceptionHandling.java     | 3 ++-
+ 1 file changed, 2 insertions(+), 1 deletion(-)
+
+diff --git a/mifosng-provider/src/main/java/com/journaldev/exceptions/ExceptionHandling.java b/mifosng-provider/src/main/java/com/journaldev/exceptions/ExceptionHandling.java
+index 924e1a8..4f06963 100644
+--- a/mifosng-provider/src/main/java/com/journaldev/exceptions/ExceptionHandling.java
++++ b/mifosng-provider/src/main/java/com/journaldev/exceptions/ExceptionHandling.java
+@@ -2,6 +2,7 @@ package com.journaldev.exceptions;
+ 
+ import java.io.FileNotFoundException;
+ import java.io.IOException;
++import java.lang.*;
+ 
+ public class ExceptionHandling {
+ 
+@@ -24,4 +25,4 @@ throw myException;
+ 
+ }
+ 
+-	}
+\ No newline at end of file
++	}
+-- 
+1.8.1.2
+
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/billing/payments/serialization/PaymentCommandFromApiJsonDeserializer.java b/mifosng-provider/src/main/java/org/mifosplatform/billing/payments/serialization/PaymentCommandFromApiJsonDeserializer.java
index b308f62..8168f27 100644
--- a/mifosng-provider/src/main/java/org/mifosplatform/billing/payments/serialization/PaymentCommandFromApiJsonDeserializer.java
+++ b/mifosng-provider/src/main/java/org/mifosplatform/billing/payments/serialization/PaymentCommandFromApiJsonDeserializer.java
@@ -36,7 +36,7 @@ public class PaymentCommandFromApiJsonDeserializer {
 			Arrays.asList("id", "clientId", "paymentDate", "paymentCode",
 					"amountPaid", "statmentId", "externalId", "dateFormat",
 					"locale", "remarks","receiptNo","chequeNo","chequeDate","bankName","branchName",
-					"isChequeSelected"));
+					"isChequeSelected","txn_id"));
 	
 	private final FromJsonHelper fromApiJsonHelper;
 
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/billing/payments/service/PaymentWritePlatformServiceImpl.java b/mifosng-provider/src/main/java/org/mifosplatform/billing/payments/service/PaymentWritePlatformServiceImpl.java
index 12979e9..928cf8c 100644
--- a/mifosng-provider/src/main/java/org/mifosplatform/billing/payments/service/PaymentWritePlatformServiceImpl.java
+++ b/mifosng-provider/src/main/java/org/mifosplatform/billing/payments/service/PaymentWritePlatformServiceImpl.java
@@ -14,6 +14,7 @@ import org.mifosplatform.billing.payments.domain.Payment;
 import org.mifosplatform.billing.payments.domain.PaymentRepository;
 import org.mifosplatform.billing.payments.paypal.service.PaypalReadPlatformService;
 import org.mifosplatform.billing.payments.serialization.PaymentCommandFromApiJsonDeserializer;
+import org.mifosplatform.billing.paymode.service.PaymodeReadPlatformService;
 import org.mifosplatform.billing.transactionhistory.service.TransactionHistoryWritePlatformService;
 import org.mifosplatform.infrastructure.core.api.JsonCommand;
 import org.mifosplatform.infrastructure.core.data.CommandProcessingResult;
@@ -42,6 +43,7 @@ public class PaymentWritePlatformServiceImpl implements
 	private final TransactionHistoryWritePlatformService transactionHistoryWritePlatformService;
 	private final ChequePaymentRepository chequePaymentRepository;
 	private final PaypalReadPlatformService paypalReadPlatformService;
+	
 
 	@Autowired
 	public PaymentWritePlatformServiceImpl(final PlatformSecurityContext context,final PaymentRepository paymentRepository,
@@ -58,6 +60,7 @@ public class PaymentWritePlatformServiceImpl implements
 		 this.updateClientBalance= updateClientBalance;
 		 this.chequePaymentRepository=chequePaymentRepository;
 		 this.paypalReadPlatformService=paypalReadPlatformService;
+		
 	}
 
 	@Override
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/billing/paymentsgateway/api/PaymentGatewayApiResource.java b/mifosng-provider/src/main/java/org/mifosplatform/billing/paymentsgateway/api/PaymentGatewayApiResource.java
new file mode 100644
index 0000000..9a84d23
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/billing/paymentsgateway/api/PaymentGatewayApiResource.java
@@ -0,0 +1,49 @@
+package org.mifosplatform.billing.paymentsgateway.api;
+
+import javax.ws.rs.Consumes;
+import javax.ws.rs.POST;
+import javax.ws.rs.Path;
+import javax.ws.rs.Produces;
+import javax.ws.rs.core.MediaType;
+
+import org.mifosplatform.billing.payments.data.PaymentData;
+import org.mifosplatform.commands.domain.CommandWrapper;
+import org.mifosplatform.commands.service.CommandWrapperBuilder;
+import org.mifosplatform.commands.service.PortfolioCommandSourceWritePlatformService;
+import org.mifosplatform.infrastructure.core.data.CommandProcessingResult;
+import org.mifosplatform.infrastructure.core.serialization.DefaultToApiJsonSerializer;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.context.annotation.Scope;
+import org.springframework.stereotype.Component;
+
+@Path("/paymentgateways")
+@Component
+@Scope("singleton")
+public class PaymentGatewayApiResource {
+
+	private final DefaultToApiJsonSerializer<PaymentData> toApiJsonSerializer;
+	private final PortfolioCommandSourceWritePlatformService writePlatformService;
+
+	@Autowired
+	public PaymentGatewayApiResource(
+			final DefaultToApiJsonSerializer<PaymentData> toApiJsonSerializer,
+			final PortfolioCommandSourceWritePlatformService writePlatformService) {
+
+		this.toApiJsonSerializer = toApiJsonSerializer;
+		this.writePlatformService = writePlatformService;
+	}
+
+	@POST
+	@Consumes({ MediaType.APPLICATION_JSON })
+	@Produces({ MediaType.APPLICATION_JSON })
+	public String mpesaPayment(final String apiRequestBodyAsJson) {
+		try {
+			final CommandWrapper commandRequest = new CommandWrapperBuilder().createPaymentGateway().withJson(apiRequestBodyAsJson).build();
+			final CommandProcessingResult result = this.writePlatformService.logCommandSource(commandRequest);
+			return this.toApiJsonSerializer.serialize(result);
+		} catch (Exception e) {
+			return null;
+		}
+	}
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/billing/paymentsgateway/domain/PaymentGateway.java b/mifosng-provider/src/main/java/org/mifosplatform/billing/paymentsgateway/domain/PaymentGateway.java
new file mode 100644
index 0000000..6441632
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/billing/paymentsgateway/domain/PaymentGateway.java
@@ -0,0 +1,148 @@
+package org.mifosplatform.billing.paymentsgateway.domain;
+
+import java.math.BigDecimal;
+import java.text.DateFormat;
+import java.text.ParseException;
+import java.text.SimpleDateFormat;
+import java.util.Date;
+
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.Table;
+import javax.persistence.Temporal;
+import javax.persistence.TemporalType;
+
+import org.joda.time.LocalDate;
+import org.mifosplatform.infrastructure.core.api.JsonCommand;
+import org.springframework.data.jpa.domain.AbstractPersistable;
+
+
+@SuppressWarnings("serial")
+@Entity
+@Table(name = "b_paymentgateway")
+public class PaymentGateway extends AbstractPersistable<Long> {
+	
+	@Column(name = "key_id")
+	private String deviceId;
+
+	@Column(name="party_id")
+	private String partyId;
+	
+	@Temporal(TemporalType.DATE)
+	@Column(name = "payment_date")
+	private Date paymentDate;
+	
+	@Column(name = "amount_paid", scale = 6, precision = 19, nullable = false)
+	private BigDecimal amountPaid;
+	
+	@Column(name = "receipt_no")
+	private String receiptNo;
+	
+	@Column(name = "source")
+	private String source;
+
+	@Column(name="t_details")
+	private String details;
+	
+	@Column(name = "payment_id")
+	private String paymentId;
+	
+	@Column(name = "obs_id")
+	private Long obsId;
+	
+	@Column(name = "status")
+	private String status;
+	
+	public PaymentGateway(){
+		
+	}
+	
+	public PaymentGateway(String deviceId, String partyId,Date paymentDate, BigDecimal amountPaid, 
+			      String receiptNo,String source, String paymentId, String details) {
+		
+		this.deviceId=deviceId;
+		this.partyId=partyId;
+		this.paymentDate=paymentDate;
+		this.amountPaid=amountPaid;
+		this.receiptNo=receiptNo;
+		this.source=source;
+		this.paymentId=paymentId;
+		this.details=details;
+	}
+
+
+	/*public static PaymentGateway fromJson(JsonCommand command) {
+		
+		final String deviceId=command.stringValueOfParameterNamed("KEY_ID");
+		final String partyId=command.stringValueOfParameterNamed("PARTY_ID");
+		final String paymentDate = command.stringValueOfParameterNamed("PAYMENT_DATE");
+		final BigDecimal amountPaid = command.bigDecimalValueOfParameterNamed("AMOUNT_PAID");
+		final String receiptNo = command.stringValueOfParameterNamed("RECEIPT_NO");
+		final String source = command.stringValueOfParameterNamed("SOURCE");
+		final String paymentId=command.stringValueOfParameterNamed("PAYMENT_ID");
+		final String details=command.stringValueOfParameterNamed("DETIALS");
+		DateFormat readFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
+		  Date date = null;
+		    try {
+		       date = readFormat.parse(paymentDate);
+		    } catch ( ParseException e ) {
+		        e.printStackTrace();
+		    }
+		return new PaymentGateway(deviceId, partyId, date, amountPaid, receiptNo, source,
+				paymentId, details);
+
+	}*/
+
+	public String getDeviceId() {
+		return deviceId;
+	}
+
+	public String getPartyId() {
+		return partyId;
+	}
+
+	public Date getPaymentDate() {
+		return paymentDate;
+	}
+
+	public BigDecimal getAmountPaid() {
+		return amountPaid;
+	}
+
+	public String getReceiptNo() {
+		return receiptNo;
+	}
+
+	public String getSource() {
+		return source;
+	}
+
+	public String getDetails() {
+		return details;
+	}
+
+	public String getPaymentId() {
+		return paymentId;
+	}
+
+	public Long getObsId() {
+		return obsId;
+	}
+
+	public String getStatus() {
+		return status;
+	}
+
+	public void setObsId(Long value) {
+		this.obsId = value;
+	}
+
+	public void setStatus(String status) {
+		this.status = status;
+	}
+	
+	
+	
+	
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/billing/paymentsgateway/domain/PaymentGatewayRepository.java b/mifosng-provider/src/main/java/org/mifosplatform/billing/paymentsgateway/domain/PaymentGatewayRepository.java
new file mode 100644
index 0000000..ef17a60
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/billing/paymentsgateway/domain/PaymentGatewayRepository.java
@@ -0,0 +1,9 @@
+package org.mifosplatform.billing.paymentsgateway.domain;
+
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
+
+public interface PaymentGatewayRepository extends JpaRepository<PaymentGateway, Long>, JpaSpecificationExecutor<PaymentGateway> 
+{
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/billing/paymentsgateway/handler/CreatePaymentGatewayCommandHandler.java b/mifosng-provider/src/main/java/org/mifosplatform/billing/paymentsgateway/handler/CreatePaymentGatewayCommandHandler.java
new file mode 100644
index 0000000..09ba1de
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/billing/paymentsgateway/handler/CreatePaymentGatewayCommandHandler.java
@@ -0,0 +1,27 @@
+package org.mifosplatform.billing.paymentsgateway.handler;
+
+import org.mifosplatform.billing.paymentsgateway.service.PaymentGatewayWritePlatformService;
+import org.mifosplatform.commands.handler.NewCommandSourceHandler;
+import org.mifosplatform.infrastructure.core.api.JsonCommand;
+import org.mifosplatform.infrastructure.core.data.CommandProcessingResult;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+@Service
+public class CreatePaymentGatewayCommandHandler implements NewCommandSourceHandler {
+
+	 
+	private final PaymentGatewayWritePlatformService paymentGatewayWritePlatformService;
+	
+	@Autowired
+	public CreatePaymentGatewayCommandHandler(final PaymentGatewayWritePlatformService paymentGatewayWritePlatformService)
+	{
+	this.paymentGatewayWritePlatformService =paymentGatewayWritePlatformService;
+	}
+
+	@Override
+	public CommandProcessingResult processCommand(JsonCommand command) {
+		// TODO Auto-generated method stub
+		return this.paymentGatewayWritePlatformService.createPaymentGateway(command);
+	}
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/billing/paymentsgateway/serialization/PaymentGatewayCommandFromApiJsonDeserializer.java b/mifosng-provider/src/main/java/org/mifosplatform/billing/paymentsgateway/serialization/PaymentGatewayCommandFromApiJsonDeserializer.java
new file mode 100644
index 0000000..5a17ec4
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/billing/paymentsgateway/serialization/PaymentGatewayCommandFromApiJsonDeserializer.java
@@ -0,0 +1,78 @@
+package org.mifosplatform.billing.paymentsgateway.serialization;
+
+import java.lang.reflect.Type;
+import java.math.BigDecimal;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+import org.apache.commons.lang.StringUtils;
+import org.mifosplatform.infrastructure.core.data.ApiParameterError;
+import org.mifosplatform.infrastructure.core.data.DataValidatorBuilder;
+import org.mifosplatform.infrastructure.core.exception.InvalidJsonException;
+import org.mifosplatform.infrastructure.core.exception.PlatformApiDataValidationException;
+import org.mifosplatform.infrastructure.core.serialization.FromJsonHelper;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Component;
+
+import com.google.gson.JsonElement;
+import com.google.gson.reflect.TypeToken;
+
+@Component
+public class PaymentGatewayCommandFromApiJsonDeserializer {
+
+	
+	/**
+	 * The parameters supported for this command.
+	 */
+	
+	private final Set<String> supportedParameters = new HashSet<String>(Arrays.asList("KEY_ID","PARTY_ID", "PAYMENT_DATE","AMOUNT_PAID", 
+			"RECEIPT_NO", "SOURCE", "PAYMENT_ID","DETIALS","dateFormat","locale"));
+	
+    private final FromJsonHelper fromApiJsonHelper;
+    
+    @Autowired
+    public PaymentGatewayCommandFromApiJsonDeserializer(final FromJsonHelper fromApiJsonHelper) {
+        this.fromApiJsonHelper = fromApiJsonHelper;
+    }
+
+    public void validateForCreate(String json) {
+
+		if (StringUtils.isBlank(json)) {
+			throw new InvalidJsonException();
+		}
+
+		final Type typeOfMap = new TypeToken<Map<String, Object>>() {
+		}.getType();
+		fromApiJsonHelper.checkForUnsupportedParameters(typeOfMap, json,
+				supportedParameters);
+
+		final List<ApiParameterError> dataValidationErrors = new ArrayList<ApiParameterError>();
+		final DataValidatorBuilder baseDataValidator = new DataValidatorBuilder(
+				dataValidationErrors).resource("paymentgateway");
+
+		final JsonElement element = fromApiJsonHelper.parse(json);
+	
+		final String keyId = fromApiJsonHelper.extractStringNamed("KEY_ID", element);
+		baseDataValidator.reset().parameter("KEY_ID").value(keyId).notBlank().notExceedingLengthOf(30);
+		final BigDecimal amountPaid = fromApiJsonHelper.extractBigDecimalWithLocaleNamed("AMOUNT_PAID", element);
+		baseDataValidator.reset().parameter("AMOUNT_PAID").value(amountPaid).notBlank();
+		final String paymentId = fromApiJsonHelper.extractStringNamed("PAYMENT_ID", element);
+		baseDataValidator.reset().parameter("paymentId").value(paymentId).notBlank();
+		
+		throwExceptionIfValidationWarningsExist(dataValidationErrors);
+	}
+
+	private void throwExceptionIfValidationWarningsExist(
+			final List<ApiParameterError> dataValidationErrors) {
+		if (!dataValidationErrors.isEmpty()) {
+			throw new PlatformApiDataValidationException(
+					"validation.msg.validation.errors.exist",
+					"Validation errors exist.", dataValidationErrors);
+		}
+	}
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/billing/paymentsgateway/service/PaymentGatewayWritePlatformService.java b/mifosng-provider/src/main/java/org/mifosplatform/billing/paymentsgateway/service/PaymentGatewayWritePlatformService.java
new file mode 100644
index 0000000..e9b0086
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/billing/paymentsgateway/service/PaymentGatewayWritePlatformService.java
@@ -0,0 +1,11 @@
+package org.mifosplatform.billing.paymentsgateway.service;
+
+import org.mifosplatform.infrastructure.core.api.JsonCommand;
+import org.mifosplatform.infrastructure.core.data.CommandProcessingResult;
+
+public interface PaymentGatewayWritePlatformService {
+
+	CommandProcessingResult createPaymentGateway(JsonCommand command);
+	
+
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/billing/paymentsgateway/service/PaymentGatewayWritePlatformServiceImpl.java b/mifosng-provider/src/main/java/org/mifosplatform/billing/paymentsgateway/service/PaymentGatewayWritePlatformServiceImpl.java
new file mode 100644
index 0000000..fead188
--- /dev/null
+++ b/mifosng-provider/src/main/java/org/mifosplatform/billing/paymentsgateway/service/PaymentGatewayWritePlatformServiceImpl.java
@@ -0,0 +1,157 @@
+package org.mifosplatform.billing.paymentsgateway.service;
+
+import java.math.BigDecimal;
+import java.text.DateFormat;
+import java.text.ParseException;
+import java.text.SimpleDateFormat;
+import java.util.Date;
+
+import org.mifosplatform.billing.mediadevice.data.MediaDeviceData;
+import org.mifosplatform.billing.mediadevice.service.MediaDeviceReadPlatformService;
+import org.mifosplatform.billing.payments.service.PaymentWritePlatformService;
+import org.mifosplatform.billing.paymentsgateway.domain.PaymentGateway;
+import org.mifosplatform.billing.paymentsgateway.domain.PaymentGatewayRepository;
+import org.mifosplatform.billing.paymentsgateway.serialization.PaymentGatewayCommandFromApiJsonDeserializer;
+import org.mifosplatform.billing.paymode.service.PaymodeReadPlatformService;
+import org.mifosplatform.infrastructure.core.api.JsonCommand;
+import org.mifosplatform.infrastructure.core.data.CommandProcessingResult;
+import org.mifosplatform.infrastructure.core.data.CommandProcessingResultBuilder;
+import org.mifosplatform.infrastructure.core.exception.PlatformDataIntegrityException;
+import org.mifosplatform.infrastructure.core.serialization.FromJsonHelper;
+import org.mifosplatform.infrastructure.security.service.PlatformSecurityContext;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.dao.DataIntegrityViolationException;
+import org.springframework.stereotype.Service;
+
+import com.google.gson.JsonElement;
+import com.google.gson.JsonObject;
+
+
+@Service
+public class PaymentGatewayWritePlatformServiceImpl implements PaymentGatewayWritePlatformService {
+
+	
+	    private final PlatformSecurityContext context;
+	    private final PaymentGatewayRepository paymentGatewayRepository;
+	    private final PaymentGatewayCommandFromApiJsonDeserializer paymentGatewayCommandFromApiJsonDeserializer;
+	    private final FromJsonHelper fromApiJsonHelper;
+	    private final MediaDeviceReadPlatformService mediaDeviceReadPlatformService;
+	    private final PaymentWritePlatformService paymentWritePlatformService;
+	    private final PaymodeReadPlatformService paymodeReadPlatformService;
+	   
+	    @Autowired
+	    public PaymentGatewayWritePlatformServiceImpl(final PlatformSecurityContext context,
+	    	    final PaymentGatewayRepository paymentGatewayRepository,final FromJsonHelper fromApiJsonHelper,
+	    		final PaymentGatewayCommandFromApiJsonDeserializer paymentGatewayCommandFromApiJsonDeserializer,
+	    		final MediaDeviceReadPlatformService mediaDeviceReadPlatformService,
+	    		final PaymentWritePlatformService paymentWritePlatformService,
+	    		final PaymodeReadPlatformService paymodeReadPlatformService)
+	    {
+	    	this.context=context;
+	    	this.paymentGatewayRepository=paymentGatewayRepository;
+	    	this.fromApiJsonHelper=fromApiJsonHelper;
+	    	this.paymentGatewayCommandFromApiJsonDeserializer=paymentGatewayCommandFromApiJsonDeserializer;
+	    	this.mediaDeviceReadPlatformService=mediaDeviceReadPlatformService;
+	    	this.paymentWritePlatformService=paymentWritePlatformService;
+	    	 this.paymodeReadPlatformService=paymodeReadPlatformService;
+	    }
+
+		@Override
+		public CommandProcessingResult createPaymentGateway(JsonCommand command) {
+			  JsonElement element=null;
+			try {
+				   context.authenticatedUser();
+				   this.paymentGatewayCommandFromApiJsonDeserializer.validateForCreate(command.json());
+				   element= fromApiJsonHelper.parse(command.json());
+				   if(element!=null){
+				    String keyId = fromApiJsonHelper.extractStringNamed("KEY_ID", element);
+				    String paymentDate = fromApiJsonHelper.extractStringNamed("PAYMENT_DATE", element);
+				    BigDecimal amountPaid = fromApiJsonHelper.extractBigDecimalWithLocaleNamed("AMOUNT_PAID", element);
+				    String partyId = fromApiJsonHelper.extractStringNamed("PARTY_ID", element);
+				    String receiptNo = fromApiJsonHelper.extractStringNamed("RECEIPT_NO", element);
+				    String SOURCE = fromApiJsonHelper.extractStringNamed("SOURCE", element);
+				    String paymentId = fromApiJsonHelper.extractStringNamed("PAYMENT_ID", element);
+				    String details = fromApiJsonHelper.extractStringNamed("DETIALS", element);
+				   DateFormat readFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
+					  Date date = null;
+					    try {
+					       date = readFormat.parse(paymentDate);
+					    } catch ( ParseException e ) {
+					        e.printStackTrace();
+					    }
+				   PaymentGateway  paymentGateway = new PaymentGateway(keyId,partyId,date,amountPaid,receiptNo,SOURCE,paymentId,details);
+				   this.paymentGatewayRepository.save(paymentGateway);
+				
+				   MediaDeviceData datas = this.mediaDeviceReadPlatformService.retrieveDeviceDetails(keyId);
+					if(datas == null){
+						throw new IllegalAccessException();		
+					}
+					Long paymodeId=this.paymodeReadPlatformService.getOnlinePaymode();
+					if(paymodeId==null){
+						paymodeId=new Long(27);
+					}
+					Long id=datas.getClientId();
+					String remarks="Details: "+details+" ,PARTY_ID:"+partyId+" ,SOURCE : "+SOURCE;
+					SimpleDateFormat daformat=new SimpleDateFormat("dd MMMM yyyy");
+				    String paymentdate=daformat.format(date);
+				    JsonObject object=new JsonObject();
+				    object.addProperty("txn_id", paymentId);
+				    object.addProperty("dateFormat","dd MMMM yyyy");
+				    object.addProperty("locale","en");
+				    object.addProperty("paymentDate",paymentdate);
+				    object.addProperty("amountPaid",amountPaid);
+				    object.addProperty("isChequeSelected","no");
+				    object.addProperty("receiptNo",receiptNo);
+				    object.addProperty("remarks",remarks);
+				    object.addProperty("paymentCode",paymodeId);
+				    String entityName="PAYMENT";
+				    final JsonElement element1 = fromApiJsonHelper.parse(object.toString());
+				    JsonCommand comm=new JsonCommand(null, object.toString(), element1, fromApiJsonHelper, entityName, id, null, null, null,
+			                null, null, null, null, null, null);
+				    CommandProcessingResult result=this.paymentWritePlatformService.createPayment(comm);
+				    if(result.resourceId()!=null){
+				    	PaymentGateway gateway=this.paymentGatewayRepository.findOne(paymentGateway.getId());
+				    	gateway.setObsId(result.resourceId());
+				    	gateway.setStatus("Success");    	
+				    	 this.paymentGatewayRepository.save(gateway);
+				    	
+				    }else{
+				    	PaymentGateway gateway=this.paymentGatewayRepository.findOne(paymentGateway.getId());
+				    	gateway.setStatus("Failure");    	
+				    	this.paymentGatewayRepository.save(gateway);
+				    }
+	                 
+					return new CommandProcessingResultBuilder().withCommandId(command.commandId()).withEntityId(paymentGateway.getId()).build();
+				   }else{
+					   return new CommandProcessingResult(Long.valueOf(-1));
+				   }
+				   
+			} catch (DataIntegrityViolationException dve) {
+	           // return CommandProcessingResult.empty();
+				    handleCodeDataIntegrityIssues(element, dve);
+					return new CommandProcessingResult(Long.valueOf(-1));
+	        } catch (IllegalAccessException e) {	 
+	        	  final String name = fromApiJsonHelper.extractStringNamed("KEY_ID", element);
+		          throw new PlatformDataIntegrityException("error.msg.code.BillerRef", "A BillerRef with this value '" + name + "' does not exists");			
+			} 
+			
+		}
+		
+		private void handleCodeDataIntegrityIssues(JsonElement element,
+				DataIntegrityViolationException dve) {
+			
+			 Throwable realCause = dve.getMostSpecificCause();
+		        if (realCause.getMessage().contains("KEY_ID")) {
+		            final String name = fromApiJsonHelper.extractStringNamed("KEY_ID", element);
+		            throw new PlatformDataIntegrityException("error.msg.code.BillerRef", "A BillerRef with this value '" + name + "' does not exists");
+		        }
+		        throw new PlatformDataIntegrityException("error.msg.cund.unknown.data.integrity.issue",
+		                "Unknown data integrity issue with resource: " + realCause.getMessage());
+			
+		}
+			 
+	    	
+
+	
+	
+}
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/billing/paymode/service/PaymodeReadPlatformService.java b/mifosng-provider/src/main/java/org/mifosplatform/billing/paymode/service/PaymodeReadPlatformService.java
index ade08ef..ba79fc6 100644
--- a/mifosng-provider/src/main/java/org/mifosplatform/billing/paymode/service/PaymodeReadPlatformService.java
+++ b/mifosng-provider/src/main/java/org/mifosplatform/billing/paymode/service/PaymodeReadPlatformService.java
@@ -18,5 +18,7 @@ public interface PaymodeReadPlatformService {
 	Collection<McodeData> retrievemCodeDetails(String codeName);
 
 	List<PaymentData> retrivePaymentsData(Long clientId);
+	
+	Long getOnlinePaymode();
 
 }
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/billing/paymode/service/PaymodeReadPlatformServiceImpl.java b/mifosng-provider/src/main/java/org/mifosplatform/billing/paymode/service/PaymodeReadPlatformServiceImpl.java
index 70befcb..df3016f 100644
--- a/mifosng-provider/src/main/java/org/mifosplatform/billing/paymode/service/PaymodeReadPlatformServiceImpl.java
+++ b/mifosng-provider/src/main/java/org/mifosplatform/billing/paymode/service/PaymodeReadPlatformServiceImpl.java
@@ -14,6 +14,7 @@ import org.mifosplatform.infrastructure.core.domain.JdbcSupport;
 import org.mifosplatform.infrastructure.core.service.TenantAwareRoutingDataSource;
 import org.mifosplatform.infrastructure.security.service.PlatformSecurityContext;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.dao.EmptyResultDataAccessException;
 import org.springframework.jdbc.core.JdbcTemplate;
 import org.springframework.jdbc.core.RowMapper;
 import org.springframework.stereotype.Service;
@@ -103,4 +104,31 @@ private class PaymentsMapper implements RowMapper<PaymentData>{
 	   return new PaymentData(clientName,payMode,paymentDate,amountPaid,isDeleted,billNumber,receiptNumber);
 	  }
 	 }
+
+@Transactional
+@Override
+public Long getOnlinePaymode() {
+	try{
+		    context.authenticatedUser();
+			Mapper mapper = new Mapper();
+			String sql = "select id from m_code_value where code_value LIKE 'Online%payment'";
+			return this.jdbcTemplate.queryForObject(sql, mapper, new Object[] {});
+			
+	}catch (final EmptyResultDataAccessException e) {
+		return null;
+	}
+}
+
+private static final class Mapper implements RowMapper<Long> {
+	
+	@Override
+	public Long mapRow(ResultSet rs, int rowNum) throws SQLException {
+		Long id = rs.getLong("id");
+		return id; 
+	}
+
 }
+
+
+
+}
\ No newline at end of file
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/commands/domain/CommandWrapper.java b/mifosng-provider/src/main/java/org/mifosplatform/commands/domain/CommandWrapper.java
index 0e00fb1..ced89d2 100644
--- a/mifosng-provider/src/main/java/org/mifosplatform/commands/domain/CommandWrapper.java
+++ b/mifosng-provider/src/main/java/org/mifosplatform/commands/domain/CommandWrapper.java
@@ -867,4 +867,13 @@ public class CommandWrapper {
 		public boolean isUpdateDeAssociation() {
 			return this.actionName.equalsIgnoreCase("DEASSOCIATION");
 		}
+		
+		public boolean isPaymentGatewayResource() {
+			return this.entityName.equalsIgnoreCase("PAYMENTGATEWAY");
+		}
+
+		public boolean isCreatePaymentGateway() {
+			return this.actionName.equalsIgnoreCase("CREATE");
+		}
+		
 }
\ No newline at end of file
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/commands/service/CommandWrapperBuilder.java b/mifosng-provider/src/main/java/org/mifosplatform/commands/service/CommandWrapperBuilder.java
index a7b8fca..a4d8645 100644
--- a/mifosng-provider/src/main/java/org/mifosplatform/commands/service/CommandWrapperBuilder.java
+++ b/mifosng-provider/src/main/java/org/mifosplatform/commands/service/CommandWrapperBuilder.java
@@ -1821,4 +1821,14 @@ public CommandWrapperBuilder updateDeAssociation(Long associationId) {
 	this.href="associations/deassociations/"+associationId;
 	return this;
 }
+
+public CommandWrapperBuilder createPaymentGateway() {
+	
+	this.actionName = "CREATE";
+	this.entityName = "PAYMENTGATEWAY";
+	this.entityId = null;
+	this.href = "/paymentgateways";
+	return this;
+}
+
 }
\ No newline at end of file
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/commands/service/SynchronousCommandProcessingService.java b/mifosng-provider/src/main/java/org/mifosplatform/commands/service/SynchronousCommandProcessingService.java
index a230ddf..e49be00 100644
--- a/mifosng-provider/src/main/java/org/mifosplatform/commands/service/SynchronousCommandProcessingService.java
+++ b/mifosng-provider/src/main/java/org/mifosplatform/commands/service/SynchronousCommandProcessingService.java
@@ -815,9 +815,11 @@ public class SynchronousCommandProcessingService implements
 				     }else {
 					     throw new UnsupportedCommandException(wrapper.commandName());
 					}                
-				  }
-			       
-			       else {
+				  }else if(wrapper.isPaymentGatewayResource()){
+					     if(wrapper.isCreatePaymentGateway()) {
+					         handler = applicationContext.getBean("createPaymentGatewayCommandHandler",NewCommandSourceHandler.class);
+					     }               
+				   }else {
 			               throw new UnsupportedCommandException(wrapper.commandName());
 		              }
 			       
diff --git a/mifosng-provider/src/main/java/org/mifosplatform/infrastructure/core/service/TomcatJdbcDataSourcePerTenantService.java b/mifosng-provider/src/main/java/org/mifosplatform/infrastructure/core/service/TomcatJdbcDataSourcePerTenantService.java
index 81fb197..67c7496 100644
--- a/mifosng-provider/src/main/java/org/mifosplatform/infrastructure/core/service/TomcatJdbcDataSourcePerTenantService.java
+++ b/mifosng-provider/src/main/java/org/mifosplatform/infrastructure/core/service/TomcatJdbcDataSourcePerTenantService.java
@@ -8,8 +8,10 @@ package org.mifosplatform.infrastructure.core.service;
 import java.io.PrintWriter;
 import java.sql.Connection;
 import java.sql.SQLException;
+import java.sql.SQLFeatureNotSupportedException;
 import java.util.HashMap;
 import java.util.Map;
+import java.util.logging.Logger;
 
 import javax.sql.DataSource;
 
@@ -148,4 +150,10 @@ public class TomcatJdbcDataSourcePerTenantService implements DataSourcePerTenant
 		// TODO Auto-generated method stub
 		return null;
 	}
+
+	@Override
+	public Logger getParentLogger() throws SQLFeatureNotSupportedException {
+		// TODO Auto-generated method stub
+		return null;
+	}
 }
\ No newline at end of file
-- 
1.8.1.2

